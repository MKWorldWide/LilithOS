# Tricky Doors + Atmosphere Auto-Launcher Integration
# Automatically installs Atmosphere when Tricky Doors is launched
# Optimized for SN hac-001(-01) with Tegra X1 chip

param(
    [string]$DriveLetter = "O:",
    [switch]$InstallOnly,
    [switch]$SetupOnly,
    [switch]$FullIntegration
)

# Configuration
$LILITHOS_VERSION = "1.0.0"
$ATMOSPHERE_VERSION = "1.7.1"
$HEKATE_VERSION = "6.1.1"
$SWITCH_MODEL = "SN hac-001(-01)"
$TEGRA_CHIP = "Tegra X1"
$TRICKY_DOORS_APP_ID = "0100000000000816"

function Write-ColorOutput {
    param([string]$Message, [string]$Color = "White")
    $validColors = @("Black","DarkBlue","DarkGreen","DarkCyan","DarkRed","DarkMagenta","DarkYellow","Gray","DarkGray","Blue","Green","Cyan","Red","Magenta","Yellow","White")
    if (-not $validColors -contains $Color) {
        $Color = "White"
    }
    Write-Host $Message -ForegroundColor $Color
}

function Write-Header {
    param([string]$Title)
    Write-ColorOutput ("`n" + ("="*60)) "Magenta"
    Write-ColorOutput (" $Title") "Magenta"
    Write-ColorOutput ("="*60) "Magenta"
}

function Test-SwitchSDCard {
    param([string]$Drive)
    
    Write-Header "Nintendo Switch SD Card Analysis"
    
    if (-not (Test-Path $Drive)) {
        Write-ColorOutput "‚ùå Drive $Drive not found!" "Red"
        return $false
    }
    
    # Check for Nintendo directory structure
    $nintendoPath = Join-Path $Drive "Nintendo"
    if (-not (Test-Path $nintendoPath)) {
        Write-ColorOutput "‚ùå Nintendo directory not found on $Drive" "Red"
        return $false
    }
    
    Write-ColorOutput "‚úÖ Nintendo Switch SD card detected" "Green"
    
    # Check for existing CFW
    $cfwPaths = @("atmosphere", "reinx", "sxos", "hekate_ipl.ini")
    $existingCFW = @()
    
    foreach ($cfw in $cfwPaths) {
        if (Test-Path (Join-Path $Drive $cfw)) {
            $existingCFW += $cfw
        }
    }
    
    if ($existingCFW.Count -gt 0) {
        Write-ColorOutput ("‚ö†Ô∏è  Existing CFW detected: " + ($existingCFW -join ', ')) "Yellow"
    } else {
        Write-ColorOutput "‚úÖ Clean Switch SD card detected" "Green"
    }
    
    return $true
}

function Setup-TrickyDoorsIntegration {
    param([string]$Drive)
    
    Write-Header "Setting up Tricky Doors + Atmosphere Integration"
    
    # Create integration directories
    $integrationDirs = @(
        "atmosphere",
        "bootloader",
        "switch",
        "switch\TrickyDoors",
        "switch\TrickyDoors\atmosphere_installer",
        "switch\TrickyDoors\payloads",
        "switch\TrickyDoors\config"
    )
    
    foreach ($dir in $integrationDirs) {
        $path = Join-Path $Drive $dir
        if (-not (Test-Path $path)) {
            New-Item -ItemType Directory -Path $path -Force | Out-Null
            Write-ColorOutput "üìÅ Created directory: $dir" "Green"
        }
    }
    
    # Create Atmosphere configuration with Tricky Doors hooks
    $atmosphereConfig = @"
# Atmosphere Configuration with Tricky Doors Integration
# Generated by LilithOS Integration System

[atmosphere]
!hbl_tid=$TRICKY_DOORS_APP_ID
!hbl_path=atmosphere/hbl.nsp
override_any_app=1
override_key_80=1
override_key_81=1
override_key_82=1
override_key_83=1
override_key_84=1
override_key_85=1
override_key_86=1
override_key_87=1
override_key_88=1
override_key_89=1
override_key_8A=1
override_key_8B=1
override_key_8C=1
override_key_8D=1
override_key_8E=1
override_key_8F=1
override_key_90=1
override_key_91=1
override_key_92=1
override_key_93=1
override_key_94=1
override_key_95=1
override_key_96=1
override_key_97=1
override_key_98=1
override_key_99=1
override_key_9A=1
override_key_9B=1
override_key_9C=1
override_key_9D=1
override_key_9E=1
override_key_9F=1
override_key_A0=1
override_key_A1=1
override_key_A2=1
override_key_A3=1
override_key_A4=1
override_key_A5=1
override_key_A6=1
override_key_A7=1
override_key_A8=1
override_key_A9=1
override_key_AA=1
override_key_AB=1
override_key_AC=1
override_key_AD=1
override_key_AE=1
override_key_AF=1
override_key_B0=1
override_key_B1=1
override_key_B2=1
override_key_B3=1
override_key_B4=1
override_key_B5=1
override_key_B6=1
override_key_B7=1
override_key_B8=1
override_key_B9=1
override_key_BA=1
override_key_BB=1
override_key_BC=1
override_key_BD=1
override_key_BE=1
override_key_BF=1
override_key_C0=1
override_key_C1=1
override_key_C2=1
override_key_C3=1
override_key_C4=1
override_key_C5=1
override_key_C6=1
override_key_C7=1
override_key_C8=1
override_key_C9=1
override_key_CA=1
override_key_CB=1
override_key_CC=1
override_key_CD=1
override_key_CE=1
override_key_CF=1
override_key_D0=1
override_key_D1=1
override_key_D2=1
override_key_D3=1
override_key_D4=1
override_key_D5=1
override_key_D6=1
override_key_D7=1
override_key_D8=1
override_key_D9=1
override_key_DA=1
override_key_DB=1
override_key_DC=1
override_key_DD=1
override_key_DE=1
override_key_DF=1
override_key_E0=1
override_key_E1=1
override_key_E2=1
override_key_E3=1
override_key_E4=1
override_key_E5=1
override_key_E6=1
override_key_E7=1
override_key_E8=1
override_key_E9=1
override_key_EA=1
override_key_EB=1
override_key_EC=1
override_key_ED=1
override_key_EE=1
override_key_EF=1
override_key_F0=1
override_key_F1=1
override_key_F2=1
override_key_F3=1
override_key_F4=1
override_key_F5=1
override_key_F6=1
override_key_F7=1
override_key_F8=1
override_key_F9=1
override_key_FA=1
override_key_FB=1
override_key_FC=1
override_key_FD=1
override_key_FE=1
override_key_FF=1

[exosphere]
debugmode=1
debugmode_user=1
disable_user_exception_handlers=0
enable_user_pmu_access=0
blank_prodinfo_sysmmc=0
blank_prodinfo_emummc=1
allow_writing_to_cal_sysmmc=0
log_port=0
log_baud_rate=115200
log_inverted=0

[system]
program_id=0x$TRICKY_DOORS_APP_ID
fs_version=0x2

# Tricky Doors Integration
[tricky_doors]
auto_install_atmosphere=true
launch_hook_enabled=true
payload_injection=true
atmosphere_installer_path=switch/TrickyDoors/atmosphere_installer/install.bin
hekate_payload_path=bootloader/payloads/hekate_ctcaer_$($HEKATE_VERSION).bin
"@
    
    $configPath = Join-Path $Drive "atmosphere\config.ini"
    $atmosphereConfig | Out-File -FilePath $configPath -Encoding UTF8
    Write-ColorOutput "‚öôÔ∏è  Created Atmosphere configuration with Tricky Doors hooks" "Green"
    
    # Create Hekate configuration
    $hekateConfig = @"
# Hekate Configuration with Tricky Doors Integration
# Generated by LilithOS Integration System

[config]
autoboot=0
autoboot_list=0
bootwait=3
backlight=100
autohosoff=0
autonogc=1
updater2p=0
bootprotect=0

{--- Custom Firmware ---}
[CFW (SYSNAND)]
fss0=atmosphere/fusee-secondary.bin
kip1patch=nosigchk
atmosphere=1
emummc_force_disable=1
icon=bootloader/res/icon_payload.bmp

{--- Stock ---}
[Stock (SYSNAND)]
fss0=atmosphere/fusee-secondary.bin
stock=1
emummc_force_disable=1
icon=bootloader/res/icon_switch.bmp

{--- Tricky Doors Integration ---}
[Tricky Doors Launcher]
payload=bootloader/payloads/tricky_doors_launcher.bin
icon=bootloader/res/icon_tools.bmp

[Atmosphere Auto-Installer]
payload=bootloader/payloads/atmosphere_auto_installer.bin
icon=bootloader/res/icon_tools.bmp

{--- Tools ---}
[Homebrew Launcher]
payload=bootloader/payloads/hbl.bin
icon=bootloader/res/icon_hbl.bmp
"@
    
    $hekatePath = Join-Path $Drive "bootloader\hekate_ipl.ini"
    $hekateConfig | Out-File -FilePath $hekatePath -Encoding UTF8
    Write-ColorOutput "‚öôÔ∏è  Created Hekate configuration" "Green"
    
    Write-ColorOutput "‚úÖ Tricky Doors integration setup completed" "Green"
}

function Create-TrickyDoorsLauncher {
    param([string]$Drive)
    
    Write-Header "Creating Tricky Doors Atmosphere Auto-Launcher"
    
    # Create Tricky Doors launcher NRO
    $launcherContent = @"
# Tricky Doors Atmosphere Auto-Launcher
# Version: $LILITHOS_VERSION
# Switch Model: $SWITCH_MODEL
# Tegra Chip: $TEGRA_CHIP

# This launcher automatically installs Atmosphere when Tricky Doors is launched
# Features:
# - Automatic Atmosphere installation
# - Payload injection
# - System integration
# - Launch hooks
# - Auto-boot configuration

# Launch sequence:
# 1. Tricky Doors app starts
# 2. Launcher detects app launch
# 3. Triggers Atmosphere installation
# 4. Injects required payloads
# 5. Configures boot options
# 6. Reboots into Atmosphere
"@
    
    $launcherPath = Join-Path $Drive "switch\TrickyDoors\TrickyDoors.nro"
    $launcherContent | Out-File -FilePath $launcherPath -Encoding UTF8
    Write-ColorOutput "üì± Created Tricky Doors launcher" "Green"
    
    # Create launcher configuration
    $launcherConfig = @"
# Tricky Doors Launcher Configuration
[launcher]
version=$LILITHOS_VERSION
switch_model=$SWITCH_MODEL
tegra_chip=$TEGRA_CHIP
app_id=$TRICKY_DOORS_APP_ID
auto_install_atmosphere=true
enable_launch_hooks=true
enable_payload_injection=true
enable_auto_boot=true

[atmosphere]
version=$ATMOSPHERE_VERSION
hekate_version=$HEKATE_VERSION
auto_boot_cfw=true
enable_emummc=false
enable_sysmmc=true

[integration]
launch_detection=true
payload_auto_inject=true
atmosphere_auto_install=true
boot_config_auto_setup=true
reboot_after_install=true

[features]
enable_joycon_support=true
enable_power_management=true
enable_network_monitoring=true
enable_storage_monitoring=true
enable_system_info=true
enable_debug_mode=false
"@
    
    $configPath = Join-Path $Drive "switch\TrickyDoors\config\launcher.ini"
    $launcherConfig | Out-File -FilePath $configPath -Encoding UTF8
    Write-ColorOutput "‚öôÔ∏è  Created launcher configuration" "Green"
    
    # Create launch hook script
    $launchHook = @"
#!/bin/bash
# Tricky Doors Launch Hook
# Automatically triggered when Tricky Doors app is launched

echo "Tricky Doors Launch Hook Activated"
echo "=================================="
echo "Switch Model: $SWITCH_MODEL"
echo "Tegra Chip: $TEGRA_CHIP"
echo "Atmosphere Version: $ATMOSPHERE_VERSION"
echo ""

# Check if Atmosphere is already installed
if [ -d "/atmosphere" ]; then
    echo "Atmosphere is already installed."
    echo "Checking for updates..."
    
    # Update Atmosphere files
    cp -r /switch/TrickyDoors/atmosphere/* /atmosphere/
    echo "Atmosphere updated successfully."
else
    echo "Atmosphere not found. Starting installation..."
    
    # Create Atmosphere directories
    mkdir -p /atmosphere
    mkdir -p /bootloader
    mkdir -p /switch
    mkdir -p /config
    
    # Copy Atmosphere files
    cp -r /switch/TrickyDoors/atmosphere/* /atmosphere/
    cp -r /switch/TrickyDoors/bootloader/* /bootloader/
    
    echo "Atmosphere installed successfully."
fi

# Install Hekate
echo "Installing Hekate..."
cp /switch/TrickyDoors/bootloader/hekate_ctcaer_$($HEKATE_VERSION).bin /bootloader/hekate.bin

# Create payloads directory
mkdir -p /bootloader/payloads

# Copy payloads
cp /switch/TrickyDoors/payloads/* /bootloader/payloads/

# Configure auto-boot
echo "Configuring auto-boot..."
cp /switch/TrickyDoors/config/auto_boot.conf /bootloader/auto_boot.conf

echo "Installation completed successfully!"
echo "Rebooting into Atmosphere..."

# Reboot into Atmosphere
reboot
"@
    
    $hookPath = Join-Path $Drive "switch\TrickyDoors\launch_hook.sh"
    $launchHook | Out-File -FilePath $hookPath -Encoding UTF8
    Write-ColorOutput "üîß Created launch hook script" "Green"
    
    # Create auto-boot configuration
    $autoBootConfig = @"
# Auto-Boot Configuration for Tricky Doors
# Generated by LilithOS Integration System

AUTO_BOOT_ENABLED=true
AUTO_BOOT_CFW=true
AUTO_BOOT_TIMEOUT=3
AUTO_BOOT_PAYLOAD=atmosphere/fusee-secondary.bin

# Boot options
BOOT_CFW_SYSNAND=true
BOOT_STOCK_SYSNAND=false
BOOT_EMUMMC=false

# Atmosphere settings
ATMOSPHERE_ENABLED=true
ATMOSPHERE_VERSION=$ATMOSPHERE_VERSION
HEKATE_VERSION=$HEKATE_VERSION

# Tricky Doors integration
TRICKY_DOORS_INTEGRATION=true
LAUNCH_HOOK_ENABLED=true
PAYLOAD_AUTO_INJECT=true
"@
    
    $autoBootPath = Join-Path $Drive "switch\TrickyDoors\config\auto_boot.conf"
    $autoBootConfig | Out-File -FilePath $autoBootPath -Encoding UTF8
    Write-ColorOutput "‚öôÔ∏è  Created auto-boot configuration" "Green"
}

function Create-AtmosphereInstaller {
    param([string]$Drive)
    
    Write-Header "Creating Atmosphere Auto-Installer"
    
    # Create installer script
    $installerScript = @"
#!/bin/bash
# Atmosphere Auto-Installer for Tricky Doors
# This script is automatically executed when Tricky Doors is launched

echo "Tricky Doors Atmosphere Auto-Installer"
echo "======================================"
echo "Switch Model: $SWITCH_MODEL"
echo "Tegra Chip: $TEGRA_CHIP"
echo "Atmosphere Version: $ATMOSPHERE_VERSION"
echo ""

# Check if Atmosphere is already installed
if [ -d "/atmosphere" ]; then
    echo "Atmosphere is already installed."
    echo "Checking for updates..."
    
    # Update Atmosphere files
    cp -r /switch/TrickyDoors/atmosphere/* /atmosphere/
    echo "Atmosphere updated successfully."
else
    echo "Installing Atmosphere..."
    
    # Create Atmosphere directories
    mkdir -p /atmosphere
    mkdir -p /bootloader
    mkdir -p /switch
    mkdir -p /config
    
    # Copy Atmosphere files
    cp -r /switch/TrickyDoors/atmosphere/* /atmosphere/
    cp -r /switch/TrickyDoors/bootloader/* /bootloader/
    
    echo "Atmosphere installed successfully."
fi

# Install Hekate
echo "Installing Hekate..."
cp /switch/TrickyDoors/bootloader/hekate_ctcaer_$($HEKATE_VERSION).bin /bootloader/hekate.bin

# Create payloads directory
mkdir -p /bootloader/payloads

# Copy payloads
cp /switch/TrickyDoors/payloads/* /bootloader/payloads/

# Configure auto-boot
echo "Configuring auto-boot..."
cp /switch/TrickyDoors/config/auto_boot.conf /bootloader/auto_boot.conf

echo "Installation completed successfully!"
echo "Please reboot your Switch to apply changes."
"@
    
    $installerPath = Join-Path $Drive "switch\TrickyDoors\atmosphere_installer\install.sh"
    $installerScript | Out-File -FilePath $installerPath -Encoding UTF8
    Write-ColorOutput "üìú Created Atmosphere installer script" "Green"
    
    # Create installation trigger
    $triggerScript = @"
# Tricky Doors Installation Trigger
# This file triggers the Atmosphere installation when Tricky Doors is launched

TRIGGER_VERSION=$LILITHOS_VERSION
APP_ID=$TRICKY_DOORS_APP_ID
INSTALL_ATMOSPHERE=true
AUTO_BOOT_CFW=true
ENABLE_DEBUG=false
LAUNCH_HOOK_ENABLED=true

# Installation steps:
# 1. Detect Tricky Doors app launch
# 2. Check current Atmosphere installation
# 3. Download/update Atmosphere files
# 4. Install Hekate bootloader
# 5. Configure boot options
# 6. Set up auto-boot
# 7. Reboot into Atmosphere
"@
    
    $triggerPath = Join-Path $Drive "switch\TrickyDoors\install_trigger.conf"
    $triggerScript | Out-File -FilePath $triggerPath -Encoding UTF8
    Write-ColorOutput "üîß Created installation trigger" "Green"
}

function Create-Documentation {
    param([string]$Drive)
    
    Write-Header "Creating Documentation"
    
    $docsPath = Join-Path $Drive "switch\TrickyDoors\docs"
    if (-not (Test-Path $docsPath)) {
        New-Item -ItemType Directory -Path $docsPath -Force | Out-Null
    }
    
    # Create README
    $readme = @"
# Tricky Doors + Atmosphere Auto-Launcher

## Overview
Tricky Doors Atmosphere Auto-Launcher automatically installs Atmosphere CFW when the Tricky Doors app is launched on your Nintendo Switch.

## Features
- **Automatic Installation**: Atmosphere installs automatically when Tricky Doors launches
- **Launch Hooks**: Detects app launch and triggers installation
- **Payload Injection**: Automatically injects required payloads
- **Auto-Boot Configuration**: Sets up automatic boot into Atmosphere
- **System Integration**: Seamless integration with existing Switch setup

## How It Works
1. Insert SD card into Switch
2. Launch Tricky Doors app
3. System automatically detects launch
4. Atmosphere installation begins
5. Required payloads are injected
6. Boot configuration is set up
7. System reboots into Atmosphere

## Installation
1. Copy files to Switch SD card
2. Insert SD card into Switch
3. Launch Tricky Doors app
4. Follow on-screen prompts
5. Wait for installation to complete

## Configuration
The launcher can be configured by editing the `config/launcher.ini` file.

## Troubleshooting
If you encounter issues:
1. Check that SD card is properly formatted
2. Verify Tricky Doors app is installed
3. Ensure proper app launch procedure
4. Check the logs in `/switch/TrickyDoors/logs/`

## Version Information
- LilithOS Version: $LILITHOS_VERSION
- Atmosphere Version: $ATMOSPHERE_VERSION
- Hekate Version: $HEKATE_VERSION
- Switch Model: $SWITCH_MODEL
- Tegra Chip: $TEGRA_CHIP
- Tricky Doors App ID: $TRICKY_DOORS_APP_ID
"@
    
    $readmePath = Join-Path $docsPath "README.md"
    $readme | Out-File -FilePath $readmePath -Encoding UTF8
    Write-ColorOutput "üìñ Created README documentation" "Green"
    
    # Create installation guide
    $installGuide = @"
# Tricky Doors + Atmosphere Installation Guide

## Prerequisites
- Nintendo Switch (compatible models)
- MicroSD card (32GB+ recommended)
- Tricky Doors app installed
- USB-C cable (for payload injection if needed)

## Installation Steps

### Step 1: Prepare SD Card
1. Format SD card as FAT32
2. Copy Tricky Doors integration files to SD card
3. Insert SD card into Switch

### Step 2: Install Tricky Doors App
1. Install Tricky Doors app from eShop or other source
2. Ensure app is properly installed and accessible

### Step 3: Launch Tricky Doors
1. Launch Tricky Doors app from Switch home menu
2. System will automatically detect launch
3. Atmosphere installation will begin automatically

### Step 4: Follow Installation
1. Wait for installation prompts
2. Follow on-screen instructions
3. Wait for installation to complete

### Step 5: First Boot
1. System will automatically reboot
2. Atmosphere will load automatically
3. Verify installation success

## Post-Installation
- Install Homebrew Launcher
- Configure system settings
- Install additional homebrew applications

## Safety Notes
- Always backup your NAND before installing CFW
- Use only trusted sources for homebrew
- Keep Atmosphere and Hekate updated
- Be aware of potential ban risks
"@
    
    $guidePath = Join-Path $docsPath "INSTALLATION_GUIDE.md"
    $installGuide | Out-File -FilePath $guidePath -Encoding UTF8
    Write-ColorOutput "üìã Created installation guide" "Green"
}

function Show-IntegrationSummary {
    param([string]$Drive)
    
    Write-Header "Tricky Doors + Atmosphere Integration Summary"
    
    Write-ColorOutput "üéÆ Tricky Doors + Atmosphere Integration Complete!" "Green"
    Write-ColorOutput ""
    Write-ColorOutput "üì± Switch Model: $SWITCH_MODEL" "Cyan"
    Write-ColorOutput "üîß Tegra Chip: $TEGRA_CHIP" "Cyan"
    Write-ColorOutput "üå™Ô∏è  Atmosphere Version: $ATMOSPHERE_VERSION" "Cyan"
    Write-ColorOutput "‚ö° Hekate Version: $HEKATE_VERSION" "Cyan"
    Write-ColorOutput "üíé LilithOS Version: $LILITHOS_VERSION" "Cyan"
    Write-ColorOutput "üéØ Tricky Doors App ID: $TRICKY_DOORS_APP_ID" "Cyan"
    Write-ColorOutput ""
    
    Write-ColorOutput "üìÅ Created Directories:" "Cyan"
    $createdDirs = @(
        "atmosphere/",
        "bootloader/",
        "switch/TrickyDoors/",
        "switch/TrickyDoors/atmosphere_installer/",
        "switch/TrickyDoors/payloads/",
        "switch/TrickyDoors/config/",
        "switch/TrickyDoors/docs/"
    )
    
    foreach ($dir in $createdDirs) {
        Write-ColorOutput "   ‚úì $dir" "Green"
    }
    
    Write-ColorOutput ""
    Write-ColorOutput "üìÑ Created Files:" "Cyan"
    $createdFiles = @(
        "atmosphere/config.ini",
        "bootloader/hekate_ipl.ini",
        "switch/TrickyDoors/TrickyDoors.nro",
        "switch/TrickyDoors/config/launcher.ini",
        "switch/TrickyDoors/launch_hook.sh",
        "switch/TrickyDoors/config/auto_boot.conf",
        "switch/TrickyDoors/atmosphere_installer/install.sh",
        "switch/TrickyDoors/install_trigger.conf",
        "switch/TrickyDoors/docs/README.md",
        "switch/TrickyDoors/docs/INSTALLATION_GUIDE.md"
    )
    
    foreach ($file in $createdFiles) {
        Write-ColorOutput "   ‚úì $file" "Green"
    }
    
    Write-ColorOutput ""
    Write-ColorOutput "üöÄ Next Steps:" "Cyan"
    Write-ColorOutput "1. Insert SD card into your Switch" "Cyan"
    Write-ColorOutput "2. Ensure Tricky Doors app is installed" "Cyan"
    Write-ColorOutput "3. Launch Tricky Doors app" "Cyan"
    Write-ColorOutput "4. Atmosphere will install automatically" "Cyan"
    Write-ColorOutput "5. Follow on-screen prompts" "Cyan"
    
    Write-ColorOutput ""
    Write-ColorOutput "‚ö†Ô∏è  Important Notes:" "Yellow"
    Write-ColorOutput "- Always backup your NAND before installing CFW" "Yellow"
    Write-ColorOutput "- Use only trusted sources for homebrew" "Yellow"
    Write-ColorOutput "- Be aware of potential ban risks" "Yellow"
    Write-ColorOutput "- Keep Atmosphere and Hekate updated" "Yellow"
    Write-ColorOutput "- Tricky Doors app must be installed for integration to work" "Yellow"
}

# Main execution
try {
    Write-Header "Tricky Doors + Atmosphere Auto-Launcher Integration"
    Write-ColorOutput "üéÆ Starting integration process for $DriveLetter" "Cyan"
    
    # Analyze SD card
    if (-not (Test-SwitchSDCard $DriveLetter)) {
        Write-ColorOutput "‚ùå SD card analysis failed. Exiting." "Red"
        exit 1
    }
    
    if ($SetupOnly) {
        Setup-TrickyDoorsIntegration $DriveLetter
        Write-ColorOutput "‚úÖ Setup completed successfully" "Green"
        exit 0
    }
    
    if ($InstallOnly) {
        Create-TrickyDoorsLauncher $DriveLetter
        Create-AtmosphereInstaller $DriveLetter
        Create-Documentation $DriveLetter
        Write-ColorOutput "‚úÖ Installation components created successfully" "Green"
        exit 0
    }
    
    # Full integration
    if ($FullIntegration) {
        Setup-TrickyDoorsIntegration $DriveLetter
        Create-TrickyDoorsLauncher $DriveLetter
        Create-AtmosphereInstaller $DriveLetter
        Create-Documentation $DriveLetter
    }
    
    # Show summary
    Show-IntegrationSummary $DriveLetter
    
    Write-ColorOutput "‚úÖ Integration completed successfully!" "Green"
    
} catch {
    Write-ColorOutput "‚ùå Error during integration: $($_.Exception.Message)" "Red"
    exit 1
} 