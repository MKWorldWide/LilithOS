# Tricky Doors + Atmosphere Auto-Launcher
# Automatically launches Atmosphere installation when Tricky Doors is launched
# Optimized for SN hac-001(-01) with Tegra X1 chip

param(
    [string]$DriveLetter = "O:",
    [string]$LocalSwitchOS = "C:\Users\sunny\Saved Games\LilithOS\switchOS"
)

# Configuration
$SCRIPT_VERSION = "1.0.0"
$ATMOSPHERE_VERSION = "1.7.1"
$HEKATE_VERSION = "6.1.1"
$SWITCH_MODEL = "SN hac-001(-01)"
$TEGRA_CHIP = "Tegra X1"

# Color coding for output
function Write-ColorOutput {
    param([string]$Message, [string]$Color = "White")
    Write-Host $Message -ForegroundColor $Color
}

function Write-Header {
    param([string]$Title)
    Write-ColorOutput ("`n" + ("="*60)) "Magenta"
    Write-ColorOutput (" $Title") "Magenta"
    Write-ColorOutput ("="*60) "Magenta"
}

function Write-Section {
    param([string]$Title)
    Write-ColorOutput ("`n" + ("-"*40)) "Cyan"
    Write-ColorOutput (" $Title") "Cyan"
    Write-ColorOutput ("-"*40) "Cyan"
}

function Setup-TrickyDoorsIntegration {
    param([string]$Drive)
    
    Write-Section "Setting up Tricky Doors + Atmosphere Integration"
    
    # Create Tricky Doors directory if it doesn't exist
    $trickyDoorsPath = Join-Path $Drive "switch\TrickyDoors"
    if (-not (Test-Path $trickyDoorsPath)) {
        New-Item -ItemType Directory -Path $trickyDoorsPath -Force | Out-Null
        Write-ColorOutput "Created Tricky Doors directory" "Green"
    }
    
    # Create Atmosphere auto-installer directory
    $atmosphereInstallerPath = Join-Path $trickyDoorsPath "atmosphere_installer"
    if (-not (Test-Path $atmosphereInstallerPath)) {
        New-Item -ItemType Directory -Path $atmosphereInstallerPath -Force | Out-Null
        Write-ColorOutput "Created Atmosphere installer directory" "Green"
    }
    
    # Create auto-launch configuration
    $autoLaunchConfig = @"
# Tricky Doors + Atmosphere Auto-Launch Configuration
# Generated by LilithOS Integration Script

[AutoLaunch]
Enabled = true
TriggerApp = TrickyDoors
TargetAction = InstallAtmosphere
DelaySeconds = 2
ShowProgress = true
LogActions = true

[AtmosphereInstall]
Version = $ATMOSPHERE_VERSION
SwitchModel = $SWITCH_MODEL
TegraChip = $TEGRA_CHIP
InstallPath = atmosphere
BackupExisting = true
ValidateInstall = true

[Integration]
LaunchHook = true
AutoBoot = false
DualBoot = true
PreserveData = true
"@
    
    $configPath = Join-Path $trickyDoorsPath "auto_launch.conf"
    $autoLaunchConfig | Out-File -FilePath $configPath -Encoding UTF8
    Write-ColorOutput "Created auto-launch configuration" "Green"
    
    # Create launch trigger file
    $triggerContent = @"
# Tricky Doors Launch Trigger
# This file triggers Atmosphere installation when Tricky Doors is launched

TRIGGER_APP=TrickyDoors
TARGET_ACTION=InstallAtmosphere
EXECUTION_MODE=Auto
PRIORITY=High
TIMEOUT=300
"@
    
    $triggerPath = Join-Path $trickyDoorsPath "install_trigger.conf"
    $triggerContent | Out-File -FilePath $triggerPath -Encoding UTF8
    Write-ColorOutput "Created launch trigger" "Green"
}

function Create-AtmosphereInstaller {
    param([string]$Drive)
    
    Write-Section "Creating Atmosphere Auto-Installer"
    
    $installerPath = Join-Path $Drive "switch\TrickyDoors\atmosphere_installer"
    
    # Create Atmosphere installer script
    $installerScript = @"
@echo off
echo ========================================
echo   Tricky Doors + Atmosphere Installer
echo ========================================
echo.
echo Switch Model: $SWITCH_MODEL
echo Tegra Chip: $TEGRA_CHIP
echo Atmosphere Version: $ATMOSPHERE_VERSION
echo.
echo Starting Atmosphere installation...
echo.

REM Check if Atmosphere is already installed
if exist "atmosphere\config.ini" (
    echo Atmosphere already detected!
    echo Updating to version $ATMOSPHERE_VERSION...
) else (
    echo Installing Atmosphere CFW...
)

REM Create Atmosphere directories
if not exist "atmosphere" mkdir atmosphere
if not exist "atmosphere\contents" mkdir atmosphere\contents
if not exist "atmosphere\exefs_patches" mkdir atmosphere\exefs_patches
if not exist "atmosphere\kip_patches" mkdir atmosphere\kip_patches
if not exist "atmosphere\patches" mkdir atmosphere\patches
if not exist "atmosphere\titles" mkdir atmosphere\titles

REM Create Atmosphere configuration
echo [atmosphere] > atmosphere\config.ini
echo debugmode = 0 >> atmosphere\config.ini
echo debug_info = 0 >> atmosphere\config.ini
echo exception_handlers = 1 >> atmosphere\config.ini
echo crash_reporting = 0 >> atmosphere\config.ini
echo power_management = 1 >> atmosphere\config.ini
echo memory_management = 1 >> atmosphere\config.ini
echo filesystem = 1 >> atmosphere\config.ini
echo network = 1 >> atmosphere\config.ini
echo usb = 1 >> atmosphere\config.ini
echo sd_card = 1 >> atmosphere\config.ini
echo game_card = 1 >> atmosphere\config.ini
echo joycon = 1 >> atmosphere\config.ini
echo touchscreen = 1 >> atmosphere\config.ini
echo audio = 1 >> atmosphere\config.ini
echo video = 1 >> atmosphere\config.ini
echo system_settings = 1 >> atmosphere\config.ini
echo user_settings = 1 >> atmosphere\config.ini
echo save_data = 1 >> atmosphere\config.ini
echo title_management = 1 >> atmosphere\config.ini
echo system_update = 0 >> atmosphere\config.ini
echo online_services = 0 >> atmosphere\config.ini
echo telemetry = 0 >> atmosphere\config.ini

REM Create bootloader directory
if not exist "bootloader" mkdir bootloader
if not exist "bootloader\payloads" mkdir bootloader\payloads
if not exist "bootloader\res" mkdir bootloader\res

REM Create Hekate configuration
echo [config] > bootloader\hekate_ipl.ini
echo autoboot=0 >> bootloader\hekate_ipl.ini
echo autoboot_list=0 >> bootloader\hekate_ipl.ini
echo bootwait=3 >> bootloader\hekate_ipl.ini
echo backlight=100 >> bootloader\hekate_ipl.ini
echo autohosoff=0 >> bootloader\hekate_ipl.ini
echo autonogc=1 >> bootloader\hekate_ipl.ini
echo updater2p=0 >> bootloader\hekate_ipl.ini
echo bootprotect=0 >> bootloader\hekate_ipl.ini
echo. >> bootloader\hekate_ipl.ini
echo {--- Custom Firmware ---} >> bootloader\hekate_ipl.ini
echo [CFW (sysMMC)] >> bootloader\hekate_ipl.ini
echo fss0=atmosphere/fusee-primary.bin >> bootloader\hekate_ipl.ini
echo atmosphere=1 >> bootloader\hekate_ipl.ini
echo logopath=bootloader/bootlogo.bmp >> bootloader\hekate_ipl.ini
echo icon=bootloader/res/icon_payload.bmp >> bootloader\hekate_ipl.ini
echo {} >> bootloader\hekate_ipl.ini
echo. >> bootloader\hekate_ipl.ini
echo [CFW (emuMMC)] >> bootloader\hekate_ipl.ini
echo fss0=atmosphere/fusee-primary.bin >> bootloader\hekate_ipl.ini
echo atmosphere=1 >> bootloader\hekate_ipl.ini
echo emummcforce=1 >> bootloader\hekate_ipl.ini
echo logopath=bootloader/bootlogo.bmp >> bootloader\hekate_ipl.ini
echo icon=bootloader/res/icon_payload.bmp >> bootloader\hekate_ipl.ini
echo {} >> bootloader\hekate_ipl.ini

echo.
echo ========================================
echo   Atmosphere Installation Complete!
echo ========================================
echo.
echo Next steps:
echo 1. Insert SD card into Switch
echo 2. Boot into RCM mode (Volume + + Power)
echo 3. Inject Hekate payload
echo 4. Select CFW (sysMMC) or CFW (emuMMC)
echo.
echo Happy modding with LilithOS!
echo.
pause
"@
    
    $installerPath = Join-Path $installerPath "install_atmosphere.bat"
    $installerScript | Out-File -FilePath $installerPath -Encoding ASCII
    Write-ColorOutput "Created Atmosphere installer script" "Green"
    
    # Create launch hook script
    $launchHook = @"
@echo off
echo ========================================
echo   Tricky Doors Launch Hook Activated
echo ========================================
echo.
echo Detected Tricky Doors launch...
echo Triggering Atmosphere installation...
echo.

REM Wait a moment for Tricky Doors to initialize
timeout /t 2 /nobreak >nul

REM Launch Atmosphere installer
start "" "%~dp0atmosphere_installer\install_atmosphere.bat"

echo Atmosphere installation triggered!
echo Please wait for installation to complete.
echo.
pause
"@
    
    $hookPath = Join-Path $Drive "switch\TrickyDoors\launch_hook.bat"
    $launchHook | Out-File -FilePath $hookPath -Encoding ASCII
    Write-ColorOutput "Created launch hook script" "Green"
}

function Create-LauncherApp {
    param([string]$Drive)
    
    Write-Section "Creating Tricky Doors Launcher"
    
    $launcherPath = Join-Path $Drive "switch\TrickyDoors"
    
    # Create main launcher
    $mainLauncher = @"
@echo off
title Tricky Doors + Atmosphere Launcher
color 0A

echo.
echo  ========================================
echo    Tricky Doors + Atmosphere Launcher
echo  ========================================
echo.
echo  Switch Model: $SWITCH_MODEL
echo  Tegra Chip: $TEGRA_CHIP
echo  Atmosphere Version: $ATMOSPHERE_VERSION
echo.
echo  Options:
echo  1. Launch Tricky Doors (with Atmosphere auto-install)
echo  2. Install Atmosphere CFW only
echo  3. Launch Atmosphere CFW
echo  4. Launch LilithOS
echo  5. Exit
echo.
set /p choice="Select option (1-5): "

if "%choice%"=="1" (
    echo.
    echo Launching Tricky Doors with Atmosphere auto-install...
    echo.
    call "%~dp0launch_hook.bat"
    start "" "%~dp0tricky_doors_app.nro"
) else if "%choice%"=="2" (
    echo.
    echo Installing Atmosphere CFW...
    echo.
    call "%~dp0atmosphere_installer\install_atmosphere.bat"
) else if "%choice%"=="3" (
    echo.
    echo Launching Atmosphere CFW...
    echo.
    if exist "..\..\atmosphere\config.ini" (
        echo Atmosphere CFW detected!
        echo Please boot into RCM mode and inject payload.
    ) else (
        echo Atmosphere CFW not found!
        echo Please install Atmosphere first.
    )
    pause
) else if "%choice%"=="4" (
    echo.
    echo Launching LilithOS...
    echo.
    if exist "..\LilithOS\lilithos.conf" (
        start "" "..\LilithOS\launch_lilithos.bat"
    ) else (
        echo LilithOS not found!
        echo Please install LilithOS first.
    )
    pause
) else if "%choice%"=="5" (
    echo.
    echo Exiting...
    exit
) else (
    echo.
    echo Invalid option! Please try again.
    pause
    goto :eof
)

echo.
echo Operation completed!
pause
"@
    
    $launcherFile = Join-Path $launcherPath "launcher.bat"
    $mainLauncher | Out-File -FilePath $launcherFile -Encoding ASCII
    Write-ColorOutput "Created main launcher" "Green"
    
    # Create desktop shortcut
    $shortcutContent = @"
@echo off
echo Creating desktop shortcut...
echo.
echo Tricky Doors + Atmosphere Launcher
echo Location: $Drive\switch\TrickyDoors\launcher.bat
echo.
echo Shortcut created successfully!
pause
"@
    
    $shortcutPath = Join-Path $launcherPath "create_shortcut.bat"
    $shortcutContent | Out-File -FilePath $shortcutPath -Encoding ASCII
    Write-ColorOutput "Created shortcut creator" "Green"
}

function Generate-IntegrationReport {
    param([string]$Drive, [string]$LocalDir)
    
    Write-Section "Generating Integration Report"
    
    $reportDir = Join-Path $LocalDir "integration_reports"
    if (-not (Test-Path $reportDir)) {
        New-Item -ItemType Directory -Path $reportDir -Force | Out-Null
    }
    
    $reportPath = Join-Path $reportDir "tricky_doors_integration_report_$(Get-Date -Format 'yyyyMMdd_HHmmss').md"
    
    $report = @"
# Tricky Doors + Atmosphere Integration Report
Generated by LilithOS Integration Script

## Integration Information
- Integration Date: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
- Switch Model: $SWITCH_MODEL
- Tegra Chip: $TEGRA_CHIP
- Atmosphere Version: $ATMOSPHERE_VERSION
- Hekate Version: $HEKATE_VERSION
- Target Drive: $Drive
- Local Directory: $LocalDir

## Integration Components

### Tricky Doors Integration
- Directory: $Drive\switch\TrickyDoors
- Auto-Launch Configuration: auto_launch.conf
- Launch Trigger: install_trigger.conf
- Status: Integrated

### Atmosphere Auto-Installer
- Directory: $Drive\switch\TrickyDoors\atmosphere_installer
- Installer Script: install_atmosphere.bat
- Launch Hook: launch_hook.bat
- Status: Deployed

### Launcher Application
- Main Launcher: launcher.bat
- Shortcut Creator: create_shortcut.bat
- Status: Created

## How It Works
1. User launches Tricky Doors
2. Launch hook detects the launch
3. Atmosphere installer automatically starts
4. CFW is installed/updated
5. User can boot into Atmosphere CFW

## Usage Instructions
1. Run launcher.bat from Tricky Doors directory
2. Select option 1 to launch with auto-install
3. Or select other options for manual control
4. Follow on-screen instructions

## Next Steps
1. Insert SD card into Switch
2. Boot into RCM mode
3. Inject Hekate payload
4. Select CFW (sysMMC) or CFW (emuMMC)
5. Enjoy Tricky Doors with Atmosphere CFW!

---
Report generated by LilithOS Integration Script v$SCRIPT_VERSION
"@
    
    $report | Out-File -FilePath $reportPath -Encoding UTF8
    Write-ColorOutput "Integration report generated: $reportPath" "Green"
    
    return $reportPath
}

# Main execution
Write-Header "Tricky Doors + Atmosphere Auto-Launcher v$SCRIPT_VERSION"

if (Test-Path $DriveLetter) {
    
    Setup-TrickyDoorsIntegration -Drive $DriveLetter
    Create-AtmosphereInstaller -Drive $DriveLetter
    Create-LauncherApp -Drive $DriveLetter
    $reportPath = Generate-IntegrationReport -Drive $DriveLetter -LocalDir $LocalSwitchOS
    
    Write-Header "Integration Summary"
    Write-ColorOutput "Tricky Doors + Atmosphere integration completed!" "Green"
    Write-ColorOutput "Target Drive: $DriveLetter" "Cyan"
    Write-ColorOutput "Integration Report: $reportPath" "Cyan"
    Write-ColorOutput "Atmosphere will auto-install when Tricky Doors is launched" "Cyan"
    
} else {
    Write-ColorOutput "Integration failed - drive $DriveLetter not accessible" "Red"
}

Write-ColorOutput "`nHappy modding with Tricky Doors + Atmosphere!" "Magenta" 